{"version":3,"sources":["components/Item.js","components/Lists.js","App.js","serviceWorker.js","index.js"],"names":["Item","props","delClick","bind","this","idx","Container","Row","Col","sm","ListGroup","value","Button","onClick","Component","Lists","arr","map","itm","App","state","items","inptxt","addClick","txtChange","slice","push","setState","splice","event","target","className","style","marginLeft","marginTop","InputGroup","margin","width","FormControl","aria-describedby","onChange","Append","variant","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2SA4BeA,E,kDAvBX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,SAAW,EAAKA,SAASC,KAAd,gBAFD,E,uDAMfC,KAAKH,MAAMC,SAASE,KAAKH,MAAMI,O,+BAI/B,OACI,6BACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,IAAI,kBAACC,EAAA,EAAUV,KAAX,KAAiBI,KAAKH,MAAMU,QACzC,kBAACH,EAAA,EAAD,CAAKC,GAAI,GAAG,kBAACG,EAAA,EAAD,CAAQC,QAAUT,KAAKF,UAAvB,wB,GAjBjBY,aCaJC,MAZf,SAAed,GACX,OACI,6BACI,kBAACS,EAAA,EAAD,KACKT,EAAMe,IAAIC,KAAI,SAACC,EAAKb,GAAN,OACX,kBAAC,EAAD,CAAMM,MAAOO,EAAKb,IAAKA,EAAKH,SAAU,SAACG,GAAD,OAASJ,EAAMC,SAASG,Y,gBCkDnEc,E,kDArDb,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IAEDmB,MAAQ,CACXC,MAAO,CACL,qBACA,qBACA,2BACA,qBACA,gBAEFC,OAAQ,IAGV,EAAKC,SAAW,EAAKA,SAASpB,KAAd,gBAChB,EAAKqB,UAAY,EAAKA,UAAUrB,KAAf,gBAfA,E,uDAmBjB,IAAMkB,EAAQjB,KAAKgB,MAAMC,MAAMI,QAC/BJ,EAAMK,KAAKtB,KAAKgB,MAAME,QACtBlB,KAAKuB,SAAS,CAACN,MAAOA,M,+BAIfhB,GACP,IAAMgB,EAAQjB,KAAKgB,MAAMC,MAAMI,QAC/BJ,EAAMO,OAAOvB,EAAK,GAClBD,KAAKuB,SAAS,CAACN,MAAOA,M,gCAIdQ,GACRzB,KAAKuB,SAAS,CAACL,OAAQO,EAAMC,OAAOnB,U,+BAG5B,IAAD,OACP,OACE,yBAAKoB,UAAU,OACb,wBAAIC,MAAO,CAAEC,WAAY,OAAQC,UAAW,SAA5C,qBACA,kBAACC,EAAA,EAAD,CAAYJ,UAAU,OAAOC,MAAO,CAAEI,OAAQ,OAAQC,MAAO,QAC3D,kBAACC,EAAA,EAAD,CAAaC,mBAAiB,eAAe5B,MAAOP,KAAKgB,MAAME,OAAQkB,SAAUpC,KAAKoB,YACtF,kBAACW,EAAA,EAAWM,OAAZ,KACA,kBAAC7B,EAAA,EAAD,CAAQ8B,QAAQ,UAAU7B,QAAST,KAAKmB,UAAxC,kBAGF,kBAAC,EAAD,CAAOP,IAAKZ,KAAKgB,MAAMC,MAAOnB,SAAU,SAACG,GAAD,OAAS,EAAKH,SAASG,W,GAhDrDS,aCQE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4d2b4b8c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, ListGroup, Container, Col, Row } from 'react-bootstrap';\r\n\r\nclass Item extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.delClick = this.delClick.bind(this);\r\n    }\r\n\r\n    delClick() {\r\n        this.props.delClick(this.props.idx);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Container>\r\n                    <Row>\r\n                        <Col sm={10}><ListGroup.Item>{this.props.value}</ListGroup.Item></Col>\r\n                        <Col sm={2}><Button onClick={ this.delClick }>削除</Button></Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Item;","import React from 'react';\r\nimport Item from './Item';\r\nimport { ListGroup } from 'react-bootstrap';\r\n\r\nfunction Lists(props) {\r\n    return(\r\n        <div>\r\n            <ListGroup>\r\n                {props.arr.map((itm, idx) => (\r\n                    <Item value={itm} idx={idx} delClick={(idx) => props.delClick(idx) }/>\r\n                ))}\r\n            </ListGroup>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Lists;","import React, {Component} from 'react';\nimport Lists from './components/Lists';\nimport { Button, InputGroup, FormControl } from 'react-bootstrap';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      items: [\n        '起きる',\n        '顔洗う',\n        '歯を磨く',\n        '酒飲む',\n        '寝る',      \n      ],\n      inptxt: '',\n    }\n\n    this.addClick = this.addClick.bind(this);\n    this.txtChange = this.txtChange.bind(this);\n  }\n\n  addClick() {\n    const items = this.state.items.slice();\n    items.push(this.state.inptxt);\n    this.setState({items: items});\n  }\n\n  //削除機能 add start\n  delClick(idx) {\n    const items = this.state.items.slice();\n    items.splice(idx, 1);\n    this.setState({items: items});\n  }\n  //削除機能 add end\n\n  txtChange(event) {\n    this.setState({inptxt: event.target.value})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h3 style={{ marginLeft: \"10px\", marginTop: \"20px\" }}>【Todos】</h3>\n        <InputGroup className=\"mb-3\" style={{ margin: \"10px\", width: \"50%\" }}>\n          <FormControl aria-describedby=\"basic-addon2\" value={this.state.inptxt} onChange={this.txtChange}/>\n          <InputGroup.Append>\n          <Button variant=\"success\" onClick={this.addClick}>追加</Button>\n          </InputGroup.Append>\n        </InputGroup>\n        <Lists arr={this.state.items} delClick={(idx) => this.delClick(idx)}/>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}