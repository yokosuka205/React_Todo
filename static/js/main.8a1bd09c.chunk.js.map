{"version":3,"sources":["components/Item.js","components/Lists.js","App.js","serviceWorker.js","index.js"],"names":["Item","props","ListGroup","style","width","marginLeft","value","Lists","marginTop","arr","map","itm","App","state","items","inptxt","addClick","bind","txtChange","this","slice","push","setState","event","target","className","InputGroup","margin","FormControl","aria-describedby","onChange","Append","Button","variant","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+QASeA,MANf,SAAcC,GACV,OACI,kBAACC,EAAA,EAAUF,KAAX,CAAgBG,MAAO,CAAEC,MAAO,MAAOC,WAAY,SAAYJ,EAAMK,QCY9DC,MAbf,SAAeN,GACX,OACI,6BACI,wBAAIE,MAAO,CAAEE,WAAY,OAAQG,UAAW,SAA5C,qBACA,kBAACN,EAAA,EAAD,KACKD,EAAMQ,IAAIC,KAAI,SAACC,GAAD,OACX,kBAAC,EAAD,CAAML,MAAOK,U,wBCwClBC,E,kDA5Cb,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IAEDY,MAAQ,CACXC,MAAO,CACL,qBACA,qBACA,2BACA,qBACA,gBAEFC,OAAQ,IAGV,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBAfA,E,uDAmBjB,IAAMH,EAAQK,KAAKN,MAAMC,MAAMM,QAC/BN,EAAMO,KAAKF,KAAKN,MAAME,QACtBI,KAAKG,SAAS,CAACR,MAAOA,M,gCAGdS,GACRJ,KAAKG,SAAS,CAACP,OAAQQ,EAAMC,OAAOlB,U,+BAIpC,OACE,yBAAKmB,UAAU,OACb,kBAACC,EAAA,EAAD,CAAYD,UAAU,OAAOtB,MAAO,CAAEwB,OAAQ,OAAQvB,MAAO,QAC3D,kBAACwB,EAAA,EAAD,CAAaC,mBAAiB,eAAevB,MAAOa,KAAKN,MAAME,OAAQe,SAAUX,KAAKD,YACtF,kBAACQ,EAAA,EAAWK,OAAZ,KACA,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAASf,KAAKH,UAAxC,kBAGF,kBAAC,EAAD,CAAOP,IAAKU,KAAKN,MAAMC,a,GAvCbqB,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8a1bd09c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { ListGroup } from 'react-bootstrap';\r\n\r\nfunction Item(props) {\r\n    return (\r\n        <ListGroup.Item style={{ width: \"50%\", marginLeft: \"10px\" }} >{props.value}</ListGroup.Item>\r\n    )\r\n}\r\n\r\nexport default Item;","import React from 'react';\r\nimport Item from './Item';\r\nimport { ListGroup } from 'react-bootstrap';\r\n\r\nfunction Lists(props) {\r\n    return(\r\n        <div>\r\n            <h3 style={{ marginLeft: \"10px\", marginTop: \"20px\" }}>【Todos】</h3>\r\n            <ListGroup>\r\n                {props.arr.map((itm) => (\r\n                    <Item value={itm} />\r\n                ))}\r\n            </ListGroup>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Lists;","import React, {Component} from 'react';\nimport Lists from './components/Lists';\nimport { Button, InputGroup, FormControl } from 'react-bootstrap';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      items: [\n        '起きる',\n        '顔洗う',\n        '歯を磨く',\n        '酒飲む',\n        '寝る',      \n      ],\n      inptxt: '',\n    }\n\n    this.addClick = this.addClick.bind(this);\n    this.txtChange = this.txtChange.bind(this);\n  }\n\n  addClick() {\n    const items = this.state.items.slice();\n    items.push(this.state.inptxt);\n    this.setState({items: items});\n  }\n\n  txtChange(event) {\n    this.setState({inptxt: event.target.value})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <InputGroup className=\"mb-3\" style={{ margin: \"10px\", width: \"50%\" }}>\n          <FormControl aria-describedby=\"basic-addon2\" value={this.state.inptxt} onChange={this.txtChange}/>\n          <InputGroup.Append>\n          <Button variant=\"success\" onClick={this.addClick}>追加</Button>\n          </InputGroup.Append>\n        </InputGroup>\n        <Lists arr={this.state.items}/>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}